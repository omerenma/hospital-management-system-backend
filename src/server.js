"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const dotenv = require("dotenv");
const cors = require("cors");
const index_1 = require("./routes/index");
const database_1 = require("./database/database");
const app = express();
app.use(express.json());
app.use(cors());
dotenv.config();
database_1.client.connect((err) => {
    if (err) {
        console.log('Connection error: ', err.message);
        return;
    }
    console.log('DB connection established successfully!');
});
app.get("/", (req, res) => {
    res.send("Hello Elastic Bean Stalk");
});
app.get('/user', (req, res) => {
    res.json({
        message: "Get all users"
    });
});
app.get('/users/:id', (req, res) => {
    res.send(req.params);
});
app.use("/users", index_1.userRoute);
app.use("/appointment", index_1.appointmentRoute);
app.use("/diagnosis", index_1.diagnosisRoute);
app.use("/patient", index_1.patientRoute);
app.use("/admission", index_1.admission);
app.use("/doctors", index_1.doctorRoute);
app.use("/book_appointments", index_1.bookAppointment);
const port = 8081;
app.listen(port, () => {
    console.log(`Express server running on port ${port}`);
});
module.exports = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW9DO0FBQ3BDLGlDQUFrQztBQUNsQyw2QkFBOEI7QUFFOUIsMENBUXdCO0FBQ3hCLGtEQUE2QztBQUk3QyxNQUFNLEdBQUcsR0FBd0IsT0FBTyxFQUFFLENBQUM7QUFFM0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDaEIsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLGlCQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDckIsSUFBRyxHQUFHLEVBQUM7UUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM5QyxPQUFNO0tBQ1A7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHlDQUF5QyxDQUFDLENBQUE7QUFDeEQsQ0FBQyxDQUFDLENBQUE7QUFFRixpQkFBTSxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBRVosR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsRUFBRTtJQUMzRCxHQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQW1CLEVBQUUsR0FBb0IsRUFBRSxFQUFFO0lBQzdELEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDUCxPQUFPLEVBQUMsZUFBZTtLQUN4QixDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQTtBQUVGLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBbUIsRUFBRSxHQUFvQixFQUFFLEVBQUU7SUFDbEUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDdEIsQ0FBQyxDQUFDLENBQUE7QUFDRixHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxpQkFBUyxDQUFDLENBQUM7QUFDN0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsd0JBQWdCLENBQUMsQ0FBQztBQUMxQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxzQkFBYyxDQUFDLENBQUM7QUFDdEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsb0JBQVksQ0FBQyxDQUFDO0FBQ2xDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLGlCQUFTLENBQUMsQ0FBQztBQUNqQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxtQkFBVyxDQUFDLENBQUM7QUFDakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSx1QkFBZSxDQUFDLENBQUM7QUFDL0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFBO0FBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtJQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xyXG5pbXBvcnQgZG90ZW52ID0gcmVxdWlyZShcImRvdGVudlwiKTtcclxuaW1wb3J0IGNvcnMgPSByZXF1aXJlKFwiY29yc1wiKTtcclxuaW1wb3J0IHBnICA9IHJlcXVpcmUoJ3BnJylcclxuaW1wb3J0IHtcclxuICB1c2VyUm91dGUsXHJcbiAgYXBwb2ludG1lbnRSb3V0ZSxcclxuICBkaWFnbm9zaXNSb3V0ZSxcclxuICBwYXRpZW50Um91dGUsXHJcbiAgYWRtaXNzaW9uLFxyXG4gIGRvY3RvclJvdXRlLFxyXG4gIGJvb2tBcHBvaW50bWVudCxcclxufSBmcm9tIFwiLi9yb3V0ZXMvaW5kZXhcIjtcclxuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSBcIi4vZGF0YWJhc2UvZGF0YWJhc2VcIjtcclxuaW1wb3J0IHsgc2VxdWVsaXplIH0gZnJvbSBcIi4vZGF0YWJhc2Uvc2VxdWVsaXplXCI7XHJcblxyXG5cclxuY29uc3QgYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uID0gZXhwcmVzcygpO1xyXG5cclxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XHJcbmFwcC51c2UoY29ycygpKTtcclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuY2xpZW50LmNvbm5lY3QoKGVycikgPT4ge1xyXG4gIGlmKGVycil7XHJcbiAgICBjb25zb2xlLmxvZygnQ29ubmVjdGlvbiBlcnJvcjogJywgZXJyLm1lc3NhZ2UpXHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgY29uc29sZS5sb2coJ0RCIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5IScpXHJcbn0pXHJcblxyXG5jbGllbnQuZW5kKClcclxuXHJcbmFwcC5nZXQoXCIvXCIsIChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XHJcbiAgcmVzLnNlbmQoXCJIZWxsbyBFbGFzdGljIEJlYW4gU3RhbGtcIik7XHJcbn0pO1xyXG5hcHAuZ2V0KCcvdXNlcicsIChyZXE6ZXhwcmVzcy5SZXF1ZXN0LCByZXM6ZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gIHJlcy5qc29uKHtcclxuICAgIG1lc3NhZ2U6XCJHZXQgYWxsIHVzZXJzXCJcclxuICB9KVxyXG59KVxyXG5cclxuYXBwLmdldCgnL3VzZXJzLzppZCcsIChyZXE6ZXhwcmVzcy5SZXF1ZXN0LCByZXM6ZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gIHJlcy5zZW5kKHJlcS5wYXJhbXMpXHJcbn0pXHJcbmFwcC51c2UoXCIvdXNlcnNcIiwgdXNlclJvdXRlKTtcclxuYXBwLnVzZShcIi9hcHBvaW50bWVudFwiLCBhcHBvaW50bWVudFJvdXRlKTtcclxuYXBwLnVzZShcIi9kaWFnbm9zaXNcIiwgZGlhZ25vc2lzUm91dGUpO1xyXG5hcHAudXNlKFwiL3BhdGllbnRcIiwgcGF0aWVudFJvdXRlKTtcclxuYXBwLnVzZShcIi9hZG1pc3Npb25cIiwgYWRtaXNzaW9uKTtcclxuYXBwLnVzZShcIi9kb2N0b3JzXCIsIGRvY3RvclJvdXRlKTtcclxuYXBwLnVzZShcIi9ib29rX2FwcG9pbnRtZW50c1wiLCBib29rQXBwb2ludG1lbnQpO1xyXG5jb25zdCBwb3J0ID0gODA4MVxyXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcclxuICBjb25zb2xlLmxvZyhgRXhwcmVzcyBzZXJ2ZXIgcnVubmluZyBvbiBwb3J0ICR7cG9ydH1gKTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFwcDtcclxuIl19