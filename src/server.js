"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const dotenv = require("dotenv");
const cors = require("cors");
const index_1 = require("./routes/index");
const database_1 = require("./database/database");
const app = express();
dotenv.config();
// let connection = new pg.Pool({
//   host: process.env.RDS_HOSTNAME,
//   user: process.env.RDS_USERNAME,
//   database: process.env.RDS_DB_NAME,
//   password: process.env.RDS_PASSWORD,
//   port: 5432,
// })
database_1.client.connect(function (err) {
    if (err) {
        console.error('Database connection failed: ' + err);
        return;
    }
    console.log('Connected to database.');
});
app.get("/", (req, res) => {
    res.send("Hello Elastic Bean Stalk");
});
app.get('/users', (req, res) => {
    res.json({
        message: "Get all users"
    });
});
app.get('/users/:id', (req, res) => {
    res.send(req.params);
});
app.use(express.json());
app.use(cors());
app.use("/users", index_1.userRoute);
app.use("/appointment", index_1.appointmentRoute);
app.use("/diagnosis", index_1.diagnosisRoute);
app.use("/patient", index_1.patientRoute);
app.use("/admission", index_1.admission);
app.use("/doctors", index_1.doctorRoute);
app.use("/book_appointments", index_1.bookAppointment);
const port = process.env.PORT || 5000;
app.listen(port, () => {
    console.log(`Express server running on port ${port}`);
});
module.exports = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW9DO0FBQ3BDLGlDQUFrQztBQUNsQyw2QkFBOEI7QUFFOUIsMENBUXdCO0FBQ3hCLGtEQUE2QztBQUU3QyxNQUFNLEdBQUcsR0FBd0IsT0FBTyxFQUFFLENBQUM7QUFFM0MsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLGlDQUFpQztBQUNqQyxvQ0FBb0M7QUFDcEMsb0NBQW9DO0FBQ3BDLHVDQUF1QztBQUN2Qyx3Q0FBd0M7QUFDeEMsZ0JBQWdCO0FBQ2hCLEtBQUs7QUFFTCxpQkFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFTLEdBQUc7SUFDdkIsSUFBSSxHQUFHLEVBQUU7UUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE9BQU87S0FDUjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUMsQ0FBQztBQUVMLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLEVBQUU7SUFDM0QsR0FBRyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBQ0gsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFtQixFQUFFLEdBQW9CLEVBQUUsRUFBRTtJQUM5RCxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ1AsT0FBTyxFQUFDLGVBQWU7S0FDeEIsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUE7QUFFRixHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQW1CLEVBQUUsR0FBb0IsRUFBRSxFQUFFO0lBQ2xFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3RCLENBQUMsQ0FBQyxDQUFBO0FBQ0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsaUJBQVMsQ0FBQyxDQUFDO0FBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLHdCQUFnQixDQUFDLENBQUM7QUFDMUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsc0JBQWMsQ0FBQyxDQUFDO0FBQ3RDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLG9CQUFZLENBQUMsQ0FBQztBQUNsQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxpQkFBUyxDQUFDLENBQUM7QUFDakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsbUJBQVcsQ0FBQyxDQUFDO0FBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsdUJBQWUsQ0FBQyxDQUFDO0FBQy9DLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQTtBQUNyQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7SUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcclxuaW1wb3J0IGRvdGVudiA9IHJlcXVpcmUoXCJkb3RlbnZcIik7XHJcbmltcG9ydCBjb3JzID0gcmVxdWlyZShcImNvcnNcIik7XHJcbmltcG9ydCBwZyAgPSByZXF1aXJlKCdwZycpXHJcbmltcG9ydCB7XHJcbiAgdXNlclJvdXRlLFxyXG4gIGFwcG9pbnRtZW50Um91dGUsXHJcbiAgZGlhZ25vc2lzUm91dGUsXHJcbiAgcGF0aWVudFJvdXRlLFxyXG4gIGFkbWlzc2lvbixcclxuICBkb2N0b3JSb3V0ZSxcclxuICBib29rQXBwb2ludG1lbnQsXHJcbn0gZnJvbSBcIi4vcm91dGVzL2luZGV4XCI7XHJcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gXCIuL2RhdGFiYXNlL2RhdGFiYXNlXCI7XHJcblxyXG5jb25zdCBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24gPSBleHByZXNzKCk7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcblxyXG4vLyBsZXQgY29ubmVjdGlvbiA9IG5ldyBwZy5Qb29sKHtcclxuLy8gICBob3N0OiBwcm9jZXNzLmVudi5SRFNfSE9TVE5BTUUsXHJcbi8vICAgdXNlcjogcHJvY2Vzcy5lbnYuUkRTX1VTRVJOQU1FLFxyXG4vLyAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5SRFNfREJfTkFNRSxcclxuLy8gICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUkRTX1BBU1NXT1JELFxyXG4vLyAgIHBvcnQ6IDU0MzIsXHJcbi8vIH0pXHJcblxyXG5jbGllbnQuY29ubmVjdChmdW5jdGlvbihlcnIpIHtcclxuICAgIGlmIChlcnIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQ6ICcgKyBlcnIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgXHJcbiAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIGRhdGFiYXNlLicpO1xyXG4gIH0pO1xyXG5cclxuYXBwLmdldChcIi9cIiwgKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICByZXMuc2VuZChcIkhlbGxvIEVsYXN0aWMgQmVhbiBTdGFsa1wiKTtcclxufSk7XHJcbmFwcC5nZXQoJy91c2VycycsIChyZXE6ZXhwcmVzcy5SZXF1ZXN0LCByZXM6ZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gIHJlcy5qc29uKHtcclxuICAgIG1lc3NhZ2U6XCJHZXQgYWxsIHVzZXJzXCJcclxuICB9KVxyXG59KVxyXG5cclxuYXBwLmdldCgnL3VzZXJzLzppZCcsIChyZXE6ZXhwcmVzcy5SZXF1ZXN0LCByZXM6ZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gIHJlcy5zZW5kKHJlcS5wYXJhbXMpXHJcbn0pXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xyXG5hcHAudXNlKGNvcnMoKSk7XHJcbmFwcC51c2UoXCIvdXNlcnNcIiwgdXNlclJvdXRlKTtcclxuYXBwLnVzZShcIi9hcHBvaW50bWVudFwiLCBhcHBvaW50bWVudFJvdXRlKTtcclxuYXBwLnVzZShcIi9kaWFnbm9zaXNcIiwgZGlhZ25vc2lzUm91dGUpO1xyXG5hcHAudXNlKFwiL3BhdGllbnRcIiwgcGF0aWVudFJvdXRlKTtcclxuYXBwLnVzZShcIi9hZG1pc3Npb25cIiwgYWRtaXNzaW9uKTtcclxuYXBwLnVzZShcIi9kb2N0b3JzXCIsIGRvY3RvclJvdXRlKTtcclxuYXBwLnVzZShcIi9ib29rX2FwcG9pbnRtZW50c1wiLCBib29rQXBwb2ludG1lbnQpO1xyXG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA1MDAwXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBFeHByZXNzIHNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtwb3J0fWApO1xyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gYXBwO1xyXG4iXX0=