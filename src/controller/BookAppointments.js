"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppointmentByDoctorId = exports.getAppointments = exports.createAppointment = void 0;
const bookAppointmentValidation_1 = require("../helpers/bookAppointmentValidation");
const BookAppointments_1 = require("../models/BookAppointments");
const createAppointment = async (req, res) => {
    const appointment = new BookAppointments_1.BookAppointmentModel();
    try {
        const { patient_id, doctor_id, appointment_date } = req.body;
        const { error, value } = bookAppointmentValidation_1.bookAppointmentSchema.validate(req.body);
        if (error) {
            return res.status(400).json({ message: error.details[0].message });
        }
        const data = { patient_id, doctor_id, appointment_date };
        const query = await appointment.booAppointment(data);
        return res.status(201).json({ message: `An appointment has been scheduled for ${data.doctor_id} and ${data.patient_id} `, data: query });
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.createAppointment = createAppointment;
const getAppointments = async (req, res) => {
    const appointment = new BookAppointments_1.BookAppointmentModel();
    try {
        const response = await appointment.getAppointment();
        return res.status(200).json(response);
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.getAppointments = getAppointments;
const getAppointmentByDoctorId = async (req, res) => {
    const appointment = new BookAppointments_1.BookAppointmentModel();
    try {
        const { id } = req.params;
        // const check = req.user
        const response = await appointment.getAppointmentByDoctorId(id);
        return res.status(200).json(response);
    }
    catch (error) {
        return error.message;
    }
};
exports.getAppointmentByDoctorId = getAppointmentByDoctorId;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9va0FwcG9pbnRtZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkJvb2tBcHBvaW50bWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsb0ZBQTZFO0FBQzdFLGlFQUFrRTtBQUUzRCxNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFBRSxHQUFXLEVBQUUsR0FBWSxFQUFFLEVBQUU7SUFDbkUsTUFBTSxXQUFXLEdBQUcsSUFBSSx1Q0FBb0IsRUFBRSxDQUFBO0lBQzVDLElBQUk7UUFDQSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDN0QsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxpREFBcUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDcEU7UUFDRCxNQUFNLElBQUksR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsQ0FBQztRQUN4RCxNQUFNLEtBQUssR0FBRyxNQUFNLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSx5Q0FBeUMsSUFBSSxDQUFDLFNBQVMsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDekk7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0tBQ2xFO0FBQ1AsQ0FBQyxDQUFBO0FBZFksUUFBQSxpQkFBaUIscUJBYzdCO0FBRU0sTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBRSxHQUFZLEVBQUUsRUFBRTtJQUNqRSxNQUFNLFdBQVcsR0FBRyxJQUFJLHVDQUFvQixFQUFFLENBQUE7SUFDOUMsSUFBSTtRQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ25ELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDdEM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsQ0FBQyxDQUFBO0tBQzlEO0FBRUgsQ0FBQyxDQUFBO0FBVFksUUFBQSxlQUFlLG1CQVMzQjtBQUVNLE1BQU0sd0JBQXdCLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBRSxHQUFZLEVBQUUsRUFBRTtJQUN4RSxNQUFNLFdBQVcsR0FBRyxJQUFJLHVDQUFvQixFQUFFLENBQUE7SUFDOUMsSUFBSTtRQUNBLE1BQU0sRUFBQyxFQUFFLEVBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO1FBRXZCLHlCQUF5QjtRQUN6QixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMvRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0tBQ3hDO0lBQUMsT0FBTyxLQUFTLEVBQUU7UUFDaEIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFBO0tBQ3ZCO0FBQ0wsQ0FBQyxDQUFBO0FBWFksUUFBQSx3QkFBd0IsNEJBV3BDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXF1ZXN0LCBSZXNwb25zZX0gZnJvbSAnZXhwcmVzcydcclxuaW1wb3J0IHtBeGlvc0Vycm9yfSBmcm9tICdheGlvcydcclxuaW1wb3J0IHsgYm9va0FwcG9pbnRtZW50U2NoZW1hIH0gZnJvbSAnLi4vaGVscGVycy9ib29rQXBwb2ludG1lbnRWYWxpZGF0aW9uJztcclxuaW1wb3J0IHsgQm9va0FwcG9pbnRtZW50TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvQm9va0FwcG9pbnRtZW50cyc7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQXBwb2ludG1lbnQgPSBhc3luYyAocmVxOlJlcXVlc3QsIHJlczpSZXNwb25zZSkgPT4ge1xyXG4gIGNvbnN0IGFwcG9pbnRtZW50ID0gbmV3IEJvb2tBcHBvaW50bWVudE1vZGVsKClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgeyBwYXRpZW50X2lkLCBkb2N0b3JfaWQsIGFwcG9pbnRtZW50X2RhdGUgfSA9IHJlcS5ib2R5O1xyXG4gICAgICAgIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSBib29rQXBwb2ludG1lbnRTY2hlbWEudmFsaWRhdGUocmVxLmJvZHkpO1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IuZGV0YWlsc1swXS5tZXNzYWdlIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0geyBwYXRpZW50X2lkLCBkb2N0b3JfaWQsIGFwcG9pbnRtZW50X2RhdGV9O1xyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYXdhaXQgYXBwb2ludG1lbnQuYm9vQXBwb2ludG1lbnQoZGF0YSk7XHJcbiAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBtZXNzYWdlOiBgQW4gYXBwb2ludG1lbnQgaGFzIGJlZW4gc2NoZWR1bGVkIGZvciAke2RhdGEuZG9jdG9yX2lkfSBhbmQgJHtkYXRhLnBhdGllbnRfaWR9IGAsIGRhdGE6IHF1ZXJ5IH0pO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIiB9KTtcclxuICAgICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QXBwb2ludG1lbnRzID0gYXN5bmMgKHJlcTpSZXF1ZXN0LCByZXM6UmVzcG9uc2UpID0+IHtcclxuICBjb25zdCBhcHBvaW50bWVudCA9IG5ldyBCb29rQXBwb2ludG1lbnRNb2RlbCgpXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBwb2ludG1lbnQuZ2V0QXBwb2ludG1lbnQoKVxyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe21lc3NhZ2U6XCJTb21ldGhpbmcgd2VudCB3cm9uZ1wifSlcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QXBwb2ludG1lbnRCeURvY3RvcklkID0gYXN5bmMgKHJlcTpSZXF1ZXN0LCByZXM6UmVzcG9uc2UpID0+IHtcclxuICAgIGNvbnN0IGFwcG9pbnRtZW50ID0gbmV3IEJvb2tBcHBvaW50bWVudE1vZGVsKClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qge2lkfSA9IHJlcS5wYXJhbXNcclxuXHJcbiAgICAgICAgLy8gY29uc3QgY2hlY2sgPSByZXEudXNlclxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBwb2ludG1lbnQuZ2V0QXBwb2ludG1lbnRCeURvY3RvcklkKGlkKVxyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXNwb25zZSlcclxuICAgIH0gY2F0Y2ggKGVycm9yOmFueSkge1xyXG4gICAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlXHJcbiAgICB9XHJcbn0iXX0=