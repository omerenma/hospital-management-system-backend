"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPatientsById = exports.getPatients = exports.editPatient = exports.deletPatient = exports.createPatient = void 0;
const Patient_1 = require("../models/Patient");
const patientValidation_1 = require("../helpers/patientValidation");
const patient = new Patient_1.PatientModel();
const createPatient = async (req, res) => {
    const { patients_name, dob, sex, residential_address, date, email, phone_no, next_of_kin_name, next_of_kin_phone_no, } = req.body;
    const { error, value } = patientValidation_1.patientSchema.validate(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }
    const data = {
        patients_name,
        dob,
        sex,
        email,
        residential_address,
        date,
        phone_no,
        next_of_kin_name,
        next_of_kin_phone_no,
    };
    try {
        const result = await patient.addPatient(data);
        return res
            .status(201)
            .json({ message: "Patient added successfully", data: result });
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.createPatient = createPatient;
// Delete Patient
const deletPatient = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await patient.deletePatient(id);
        return res
            .status(201)
            .json({ message: "Patient deleted successfully", data: result });
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.deletPatient = deletPatient;
// Edit Patient
const editPatient = async (req, res) => {
    try {
        const { id } = req.params;
        const { status, } = req.body;
        const data = { id, status };
        const result = await patient.editPatient(data);
        return res.status(200).json({ message: "Record updated successfully", data: result });
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.editPatient = editPatient;
const getPatients = async (req, res) => {
    try {
        const result = await patient.getPatients();
        return res.status(200).json(result);
    }
    catch (error) {
        return res.status(500).json({ error });
    }
};
exports.getPatients = getPatients;
const getPatientsById = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await patient.getPatientsById(id);
        return res.status(200).json({ data: result });
    }
    catch (error) {
        return res.status(500).json({ error });
    }
};
exports.getPatientsById = getPatientsById;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQYXRpZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQ0FBaUQ7QUFDakQsb0VBQTZEO0FBRTdELE1BQU0sT0FBTyxHQUFHLElBQUksc0JBQVksRUFBRSxDQUFDO0FBQzVCLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDakUsTUFBTSxFQUNKLGFBQWEsRUFDYixHQUFHLEVBQ0gsR0FBRyxFQUNILG1CQUFtQixFQUNwQixJQUFJLEVBQ0gsS0FBSyxFQUNMLFFBQVEsRUFDUixnQkFBZ0IsRUFDaEIsb0JBQW9CLEdBQ3JCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUdiLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsaUNBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFELElBQUksS0FBSyxFQUFFO1FBQ1QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDcEU7SUFDRCxNQUFNLElBQUksR0FBRztRQUNYLGFBQWE7UUFDYixHQUFHO1FBQ0gsR0FBRztRQUNILEtBQUs7UUFDTCxtQkFBbUI7UUFDbkIsSUFBSTtRQUNKLFFBQVE7UUFDUixnQkFBZ0I7UUFDaEIsb0JBQW9CO0tBQ3JCLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxFQUFFLE1BQU0s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Q0FBQTtLQUM5QztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ1osT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7S0FDdkM7QUFDSCxDQUFDLENBQUE7QUFSWSxRQUFBLGVBQWUsbUJBUTNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgeyBQYXRpZW50TW9kZWwgfSBmcm9tIFwiLi4vbW9kZWxzL1BhdGllbnRcIjtcclxuaW1wb3J0IHsgcGF0aWVudFNjaGVtYSB9IGZyb20gXCIuLi9oZWxwZXJzL3BhdGllbnRWYWxpZGF0aW9uXCI7XHJcblxyXG5jb25zdCBwYXRpZW50ID0gbmV3IFBhdGllbnRNb2RlbCgpO1xyXG5leHBvcnQgY29uc3QgY3JlYXRlUGF0aWVudCA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBwYXRpZW50c19uYW1lLFxyXG4gICAgZG9iLFxyXG4gICAgc2V4LFxyXG4gICAgcmVzaWRlbnRpYWxfYWRkcmVzcyxcclxuICAgZGF0ZSxcclxuICAgIGVtYWlsLFxyXG4gICAgcGhvbmVfbm8sXHJcbiAgICBuZXh0X29mX2tpbl9uYW1lLFxyXG4gICAgbmV4dF9vZl9raW5fcGhvbmVfbm8sXHJcbiAgfSA9IHJlcS5ib2R5O1xyXG5cclxuXHJcbiAgY29uc3QgeyBlcnJvciwgdmFsdWUgfSA9IHBhdGllbnRTY2hlbWEudmFsaWRhdGUocmVxLmJvZHkpO1xyXG4gIGlmIChlcnJvcikge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IuZGV0YWlsc1swXS5tZXNzYWdlIH0pO1xyXG4gIH1cclxuICBjb25zdCBkYXRhID0ge1xyXG4gICAgcGF0aWVudHNfbmFtZSxcclxuICAgIGRvYixcclxuICAgIHNleCxcclxuICAgIGVtYWlsLFxyXG4gICAgcmVzaWRlbnRpYWxfYWRkcmVzcyxcclxuICAgIGRhdGUsXHJcbiAgICBwaG9uZV9ubyxcclxuICAgIG5leHRfb2Zfa2luX25hbWUsXHJcbiAgICBuZXh0X29mX2tpbl9waG9uZV9ubyxcclxuICB9O1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXRpZW50LmFkZFBhdGllbnQoZGF0YSk7XHJcbiAgICByZXR1cm4gcmVzXHJcbiAgICAgIC5zdGF0dXMoMjAxKVxyXG4gICAgICAuanNvbih7IG1lc3NhZ2U6IFwiUGF0aWVudCBhZGRlZCBzdWNjZXNzZnVsbHlcIiwgZGF0YTogcmVzdWx0IH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gRGVsZXRlIFBhdGllbnRcclxuZXhwb3J0IGNvbnN0IGRlbGV0UGF0aWVudCA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBhdGllbnQuZGVsZXRlUGF0aWVudChpZCk7XHJcbiAgICByZXR1cm4gcmVzXHJcbiAgICAgIC5zdGF0dXMoMjAxKVxyXG4gICAgICAuanNvbih7IG1lc3NhZ2U6IFwiUGF0aWVudCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiLCBkYXRhOiByZXN1bHQgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIiB9KTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBFZGl0IFBhdGllbnRcclxuZXhwb3J0IGNvbnN0IGVkaXRQYXRpZW50ID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBzdGF0dXMsXHJcbiAgICB9ID0gcmVxLmJvZHk7XHJcbiAgICBjb25zdCBkYXRhID0ge2lkLCBzdGF0dXN9O1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF0aWVudC5lZGl0UGF0aWVudChkYXRhKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7bWVzc2FnZTpcIlJlY29yZCB1cGRhdGVkIHN1Y2Nlc3NmdWxseVwiLCBkYXRhOiByZXN1bHQgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIiB9KTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UGF0aWVudHMgPSBhc3luYyAocmVxOlJlcXVlc3QsIHJlczpSZXNwb25zZSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXRpZW50LmdldFBhdGllbnRzKClcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0KVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe2Vycm9yfSlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBhdGllbnRzQnlJZCA9IGFzeW5jIChyZXE6UmVxdWVzdCwgcmVzOlJlc3BvbnNlKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHtpZH0gPSByZXEucGFyYW1zXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBhdGllbnQuZ2V0UGF0aWVudHNCeUlkKGlkKVxyXG4gICAgICByZXR1cm4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtkYXRhOnJlc3VsdH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtlcnJvcn0pXHJcbiAgfVxyXG59Il19