"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDoctors = exports.editUser = exports.deleteUser = exports.getUserById = exports.getUsers = exports.signin = exports.signup = void 0;
const userValidation_1 = require("../helpers/userValidation");
const Users_1 = require("../models/Users");
const jwt = require("jsonwebtoken");
const user = new Users_1.UsersModel();
// Add new user
const signup = async (req, res) => {
    try {
        const { error, value } = userValidation_1.registerSchema.validate(req.body);
        if (error) {
            return res.status(400).json({ message: error.details[0].message });
        }
        const { name, email, role, password } = req.body;
        const data = { name, email, role, password };
        const query = await user.addUser(data);
        return res
            .status(201)
            .json({ message: "New user registered successfully", data: query.name });
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.signup = signup;
// Signin user
const signin = async (req, res) => {
    try {
        const { error, value } = userValidation_1.loginSchema.validate(req.body);
        if (error) {
            return res.status(400).json({ message: error.details[0].message });
        }
        const { email, password } = req.body;
        const result = await user.login(email, password);
        if (result) {
            let payload = jwt.sign({ payload: result }, process.env.TOKEN_SECRET, { expiresIn: "30 minutes" });
            return res.status(200).json({
                message: "Login successful",
                token: payload,
                name: result && result.name,
                email: result && result.email,
                role: result && result.role,
                id: result && result.id
            });
        }
        else {
            return res.status(400).json({ message: "Invalid login credentials" });
        }
    }
    catch (error) {
        return res.json(error);
    }
};
exports.signin = signin;
// Get all users
const getUsers = async (req, res) => {
    try {
        const result = await user.getUsers();
        return res.json(result);
    }
    catch (error) {
        return res.status(500).json({ message: "Failed to fetch records" });
    }
};
exports.getUsers = getUsers;
// Get a single user
const getUserById = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await user.getUserById(parseInt(id));
        return res.json(result);
    }
    catch (error) {
        return res.status(500).json({ message: "Failed to fetch records" });
    }
};
exports.getUserById = getUserById;
// Delete user
const deleteUser = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await user.deleteUser(parseInt(id));
        return res.status(200).json({
            message: `User has been deleted successfully`,
            data: result,
        });
    }
    catch (error) {
        return res.status(400).json({ message: "Something went wrong" });
    }
};
exports.deleteUser = deleteUser;
// Edit user
const editUser = async (req, res) => {
    try {
        const { id, name, email, role } = req.body;
        const result = await user.editUser(id, name, email, role);
        if (result) {
            return res.status(200).json(result);
        }
        else {
            return res
                .status(404)
                .json({ message: "No user found for the operation" });
        }
    }
    catch (error) {
        return res.status(500).json({ message: "Something went wrong" });
    }
};
exports.editUser = editUser;
// Get all Doctors
const getDoctors = async (req, res) => {
    try {
        const result = await user.getDoctors();
        return res.status(200).json(result);
    }
    catch (error) {
        return res.status(500).json({ message: "Failed to fetch records" });
    }
};
exports.getDoctors = getDoctors;
//# sourceMappingURL=data:application/json;base64,